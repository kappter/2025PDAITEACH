<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Reflection Survey</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: sans-serif; padding: 1rem; max-width: 600px; margin: auto; }
    .question { display: none; }
    .active { display: block; }
    button { margin: 0.3rem; padding: 0.6rem 1rem; border: none; border-radius: 8px; background: #007acc; color: white; font-size: 1rem; }
    button:hover { background: #005fa3; }
    .option-btn { display: block; width: 100%; margin: 0.4rem 0; background: #f0f0f0; color: #333; }
    .option-btn.selected { background: #007acc; color: white; }
    canvas { max-width: 100%; margin-top: 1rem; }
  </style>
</head>
<body>
  <h2>AI Reflection Survey</h2>

  <!-- Step 1: Cognitive Load -->
  <div class="question active" id="q1">
    <h3>Step 1: Which tasks drain the most energy each week? (select all)</h3>
    <button class="option-btn" onclick="toggleTask(this, 'Grading & Feedback')">Grading & Feedback</button>
    <button class="option-btn" onclick="toggleTask(this, 'Lesson Planning')">Lesson Planning</button>
    <button class="option-btn" onclick="toggleTask(this, 'Emails/Admin')">Emails/Admin</button>
    <button class="option-btn" onclick="toggleTask(this, 'Parent Communication')">Parent Communication</button>
    <button class="option-btn" onclick="toggleTask(this, 'Classroom Documentation')">Classroom Documentation</button>
    <button class="option-btn" onclick="toggleTask(this, 'Other')">Other</button>
    <button onclick="nextQuestion(1)">Next</button>
  </div>

  <!-- Step 2: Priorities Ranking -->
  <div class="question" id="q2">
    <h3>Step 2: Rank the importance of these in your teaching practice.</h3>
    <p>Tap to assign priorities (1–4):</p>
    <div id="priority-options"></div>
    <button onclick="nextQuestion(2)">Next</button>
  </div>

  <!-- Step 3: Reflection Summary -->
  <div class="question" id="q3">
    <h3>Step 3: Your Reflection</h3>
    <canvas id="tasksChart"></canvas>
    <div id="summary"></div>
  </div>

  <script>
    let selectedTasks = [];
    let priorities = {};
    let currentRank = 1;

    function toggleTask(btn, task) {
      if (selectedTasks.includes(task)) {
        selectedTasks = selectedTasks.filter(t => t !== task);
        btn.classList.remove('selected');
      } else {
        selectedTasks.push(task);
        btn.classList.add('selected');
      }
    }

    function nextQuestion(step) {
      document.getElementById(`q${step}`).classList.remove('active');
      document.getElementById(`q${step+1}`).classList.add('active');

      if (step === 1) initPriorities();
      if (step === 2) showSummary();
    }

    function initPriorities() {
      const container = document.getElementById('priority-options');
      const options = ['Creativity', 'Personalization', 'Efficiency', 'Compliance'];
      container.innerHTML = '';
      options.forEach(opt => {
        const btn = document.createElement('button');
        btn.textContent = opt;
        btn.className = 'option-btn';
        btn.onclick = () => selectPriority(btn, opt);
        container.appendChild(btn);
      });
    }

    function selectPriority(btn, opt) {
      if (priorities[opt]) return; // already chosen
      priorities[opt] = currentRank;
      btn.textContent = `${opt} (#${currentRank})`;
      btn.classList.add('selected');
      currentRank++;
    }

    function showSummary() {
      // Chart of cognitive load
      const ctx = document.getElementById('tasksChart').getContext('2d');
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: selectedTasks,
          datasets: [{
            label: 'Your Energy Drains',
            data: selectedTasks.map(() => 1),
            backgroundColor: '#007acc'
          }]
        },
        options: { responsive: true, plugins: { legend: { display: false } } }
      });

      // Reflection text
      const topPriorities = Object.entries(priorities)
        .sort((a,b) => a[1]-b[1])
        .map(([k]) => k);

      document.getElementById('summary').innerHTML = `
        <p>You spend much of your energy on: <strong>${selectedTasks.join(', ') || 'No tasks selected'}</strong>.</p>
        <p>Your top priorities are: <strong>${topPriorities.slice(0,2).join(' & ')}</strong>.</p>
        <p><em>If efficiency isn’t your top priority, would you be comfortable letting AI handle efficiency so you can focus on ${topPriorities[0]}?</em></p>
      `;
    }
  </script>
</body>
</html>
